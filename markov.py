import random
import string

def make_markov(filename,n=2):
    """
    Make a markov representation of filename from prefixes of length n to possible suffixes

    filename: text file
    n: number of word for prefixes

    Returns: Dictionary mapping prefixes of length n to possible suffixes
    """
    h = {}
    for line in open(filename):
        line = process_line(line)
        for i in range(len(line)-n):
            prefix = " ".join(line[i:n+i])
            suffix = line[n+i]
            h[prefix] = h.get(prefix,[]) + [suffix]
    return h

def process_line(line):
    """
    Returns a "clean line" as an array
    """
    t = []
    words = line.split() # Makes list of words
    for word in words:
        t.append(word.strip(string.punctuation+string.whitespace).lower())
    return t


def random_text(markov,n):
    """
    Generates random text from a markov analysis

    markov: mapping from prefixes to suffixes
    n: number of iterations to acquire random text
    l: length of prefix
    """
    prefix = random.choice(markov.items())[0]
    random_string = prefix # Initial value
    for i in range(n):
        try:
            suffix = random.choice(markov[prefix])
            random_string += " " + suffix
            prefix = shift(prefix, suffix)
        except KeyError:
            # New prefix generated by adding suffix doesn't exist as prefix in markov dict
            prefix = random.choice(markov.items())[0]
    return random_string

def shift(s, word):
    """
    Forms a new string by removing the first word and adding another to the tails

    s: string
    word: new string

    Returns: new string
    """
    word_arr = s.split()
    no_head = word_arr[1:]
    string_no_head = " ".join(no_head)
    return string_no_head + " " + word

if __name__ == '__main__':
    markov = make_markov("book.txt",4)
    print random_text(markov,100)
